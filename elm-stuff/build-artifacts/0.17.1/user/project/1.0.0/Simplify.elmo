var _user$project$Simplify$attachSentencesFromIds = F2(
	function (id_lst, str_lst) {
		var strArray = _elm_lang$core$Array$fromList(str_lst);
		var orderedIds = A2(
			_elm_lang$core$List$sortBy,
			function (id) {
				return id;
			},
			id_lst);
		var arrayIds = _elm_lang$core$Array$fromList(orderedIds);
		var orderedSentArray = A2(
			_elm_lang$core$Array$map,
			function (idx) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					A2(_elm_lang$core$Array$get, idx, strArray));
			},
			arrayIds);
		return A2(
			_elm_lang$core$String$join,
			' ',
			_elm_lang$core$Array$toList(orderedSentArray));
	});
var _user$project$Simplify$selectGoodSentenceIds = F2(
	function (dict, num) {
		var organizedSents = _elm_lang$core$List$reverse(
			A2(
				_elm_lang$core$List$sortBy,
				function (_p0) {
					var _p1 = _p0;
					return _p1._1;
				},
				_elm_lang$core$Dict$toList(dict)));
		var truncatedSents = A2(_elm_lang$core$List$take, num, organizedSents);
		return A3(
			_elm_lang$core$List$foldl,
			function (_p2) {
				var _p3 = _p2;
				return F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					})(_p3._0);
			},
			_elm_lang$core$Native_List.fromArray(
				[]),
			truncatedSents);
	});
var _user$project$Simplify$countSentenceScore = F2(
	function (lst, sent) {
		var raw_score = A3(
			_elm_lang$core$List$foldl,
			function (word) {
				var numHits = A2(
					_elm_lang$core$String$indices,
					word,
					_elm_lang$core$String$toLower(sent));
				return F2(
					function (x, y) {
						return x + y;
					})(
					_elm_lang$core$List$length(numHits));
			},
			0,
			lst);
		return (raw_score / _elm_lang$core$List$length(
			_elm_lang$core$String$words(sent))) | 0;
	});
var _user$project$Simplify$annotateSentences = F2(
	function (sent_lst, word_lst) {
		return A3(
			_elm_lang$core$List$foldl,
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_lang$core$Dict$insert,
					_p5._0,
					A2(_user$project$Simplify$countSentenceScore, word_lst, _p5._1));
			},
			_elm_lang$core$Dict$empty,
			_elm_lang$core$Array$toIndexedList(
				_elm_lang$core$Array$fromList(sent_lst)));
	});
var _user$project$Simplify$restoreSentences = function (lst) {
	var _p6 = lst;
	if (_p6.ctor === '[]') {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	} else {
		if (_p6._1.ctor === '[]') {
			var _p7 = _p6._0;
			return _elm_lang$core$Native_Utils.eq(_p7, '') ? _elm_lang$core$Native_List.fromArray(
				[]) : _elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$String$trim(_p7),
					'.')
				]);
		} else {
			return A2(
				_elm_lang$core$List_ops['::'],
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$String$trim(_p6._0),
					'.'),
				_user$project$Simplify$restoreSentences(_p6._1));
		}
	}
};
var _user$project$Simplify$genSentenceList = function (str) {
	return _user$project$Simplify$restoreSentences(
		A2(_elm_lang$core$String$split, '.', str));
};
var _user$project$Simplify$removeSmallWords = function (lst) {
	return A2(
		_elm_lang$core$List$filter,
		function (_p8) {
			var _p9 = _p8;
			return _elm_lang$core$Native_Utils.cmp(
				_elm_lang$core$String$length(_p9._0),
				4) > 0;
		},
		lst);
};
var _user$project$Simplify$selectImportantWords = F2(
	function (lst, num) {
		var abbrevLst = A2(
			_elm_lang$core$List$take,
			num,
			_user$project$Simplify$removeSmallWords(lst));
		return A3(
			_elm_lang$core$List$foldl,
			function (_p10) {
				var _p11 = _p10;
				return F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					})(_p11._0);
			},
			_elm_lang$core$Native_List.fromArray(
				[]),
			abbrevLst);
	});
var _user$project$Simplify$dictToOrderedList = function (dict) {
	return _elm_lang$core$List$reverse(
		A2(
			_elm_lang$core$List$sortBy,
			function (_p12) {
				var _p13 = _p12;
				return _p13._1;
			},
			_elm_lang$core$Dict$toList(dict)));
};
var _user$project$Simplify$addItem = F2(
	function (str, dict) {
		var _p14 = A2(_elm_lang$core$Dict$get, str, dict);
		if (_p14.ctor === 'Just') {
			return A3(
				_elm_lang$core$Dict$insert,
				_elm_lang$core$String$toLower(str),
				_p14._0 + 1,
				dict);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_elm_lang$core$String$toLower(str),
				1,
				dict);
		}
	});
var _user$project$Simplify$constructDict = function (lst) {
	return A3(
		_elm_lang$core$List$foldl,
		function (str) {
			return _user$project$Simplify$addItem(str);
		},
		_elm_lang$core$Dict$empty,
		lst);
};
var _user$project$Simplify$removePunc = F2(
	function (chars, strs) {
		return A2(
			_elm_lang$core$List$map,
			_elm_lang$core$String$filter(
				function (c) {
					return _elm_lang$core$Basics$not(
						A2(_elm_lang$core$List$member, c, chars));
				}),
			strs);
	});
var _user$project$Simplify$createList = function (str) {
	return A2(
		_user$project$Simplify$removePunc,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$core$Native_Utils.chr('.'),
				_elm_lang$core$Native_Utils.chr(','),
				_elm_lang$core$Native_Utils.chr(':')
			]),
		A2(_elm_lang$core$String$split, ' ', str));
};
var _user$project$Simplify$genWordDictionary = function (str) {
	return _user$project$Simplify$constructDict(
		_user$project$Simplify$createList(str));
};
var _user$project$Simplify$genWordCountList = function (str) {
	return A2(
		_user$project$Simplify$selectImportantWords,
		_user$project$Simplify$dictToOrderedList(
			_user$project$Simplify$genWordDictionary(str)),
		5);
};
var _user$project$Simplify$genGoodSentenceList = function (str) {
	var sentLst = _user$project$Simplify$genSentenceList(str);
	return A2(
		_user$project$Simplify$attachSentencesFromIds,
		A2(
			_user$project$Simplify$selectGoodSentenceIds,
			A2(
				_user$project$Simplify$annotateSentences,
				sentLst,
				_user$project$Simplify$genWordCountList(str)),
			5),
		sentLst);
};
var _user$project$Simplify$simplify = function (str) {
	return _user$project$Simplify$genGoodSentenceList(str);
};
